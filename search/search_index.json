{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#tikzplotly","title":"Tikzplotly","text":"<p>Convert plotly figures to TikZ code for inclusion into PGFPlots (PGF/TikZ) figures.</p> <p>This results in a tikz code, that can be easily included into your LaTeX document. This also allows to easily edit the content of the figure.</p> <p>More details can be found in the documentation.</p>"},{"location":"#example","title":"Example","text":"<p>The following Python code</p> <pre><code>import plotly.express as px\nimport tikzplotly\n\ndf = px.data.gapminder().query(\"continent == 'Oceania'\")\nfig = px.line(df, x='year', y='lifeExp', color='country', markers=True)\ntikzplotly.save(\"example.tex\", fig)\n</code></pre> <p>will result in the following tikz code</p> <pre><code>\\pgfplotstableread{data0 Australia New_Zealand\n1952 69.12 69.39\n1957 70.33 70.26\n1962 70.93 71.24\n1967 71.1 71.52\n1972 71.93 71.89\n1977 73.49 72.22\n1982 74.74 73.84\n1987 76.32 74.32\n1992 77.56 76.33\n1997 78.83 77.55\n2002 80.37 79.11\n2007 81.235 80.204\n}\\dataZ\n\n\\begin{tikzpicture}\n\n\\definecolor{636efa}{HTML}{636efa}\n\\definecolor{EF553B}{HTML}{EF553B}\n\n\\begin{axis}[\nxlabel=year,\nylabel=lifeExp,\n]\n\\addplot+ [mark=*, solid, color=636efa, mark options={solid, draw=636efa}] table[y=Australia] {\\dataZ};\n\\addlegendentry{Australia}\n\\addplot+ [mark=*, solid, color=EF553B, mark options={solid, draw=EF553B}] table[y=New_Zealand] {\\dataZ};\n\\addlegendentry{New Zealand}\n\\end{axis}\n\\end{tikzpicture}\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Tikzplotly is available from the Python Package Index, so it can be installed with <code>pip</code> :</p> <pre><code>pip install tikzplotly\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<ol> <li>Generate the figure with Plotly,</li> <li>Invoke <code>tikzplotly</code> to convert the figure to tikz code : <pre><code>import tikzplotly\n\ntikzplotly.save(\"figure.tex\", fig)\n</code></pre></li> <li>Add the content of the generated file <code>figure.tex</code> to your LaTeX document : <pre><code>\\input{figure.tex}\n</code></pre> To correctly compile the document, you will need to add the following packages to your preamble : <pre><code>\\usepackage{pgfplots}\n\\pgfplotsset{compat=newest}\n</code></pre></li> </ol>"},{"location":"#note","title":"Note","text":"<ul> <li>This module is in development and new features are added bit by bit, when needed. If you have a feature request, please open an issue with the plotly figure you want to convert and the desired output. You can also submit a pull request with the desired feature !</li> <li>Some feature can result in different output between the plotly figure and the TikZ figure, for instance the size of markers, more details can be found in the documentation.</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>plotly</li> <li>PGFPlots (with manual)</li> <li>PGF/TikZ</li> <li>tikzplotlib : a similar project for matplotlib figures from which this one is inspired.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"develop/contributing/","title":"Contributing","text":"<p>If there is a Plotly figure that you would like to convert to tikz and is not supported yet of if the generated LaTeX code is not correct, please open an issue.</p> <p> Open Issue</p> <p>You can also submit a pull request with the desired feature or the correction of the issue.</p>"},{"location":"develop/contributing/#development","title":"Development","text":"<p>The actual code maybe quite messy (is with your contribution you manage to imrpove it, I thank you in advance !). The source code of the package are present in the directory <code>src/tikzplotly</code>, in which each file is dedicated to a specific feature of the library.</p> <p>Some external packages are necessary to make tikzplotly work, that are specified in the <code>requirements.txt</code> file. You can create a virtual environment and install the dependencies with the following commands:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"develop/contributing/#add-some-tests","title":"Add some tests","text":"<p>There are two types of tests:</p> <ul> <li>The tests that are run locally to make the development easier and see if the code is working as expected. More details are provided on this page.</li> <li>Tests with a reference TeX code that will be run on the CI to check if the code is working well. More details are provided on this page.</li> </ul>"},{"location":"develop/contributing/#run-the-tests-and-look-at-code-coverage","title":"Run the tests and look at code coverage","text":"<p>To run the tests, you need to install the development dependencies with the following command :</p> <pre><code>tox -- --cov tikzplotly --cov-report html --cov-report term\n</code></pre> <p>The code coverage is available in the directory <code>htmlcov</code>.</p> <p>Note about coverage</p> <p>The coverage CI is quite strict, so you need to cover all the modification to pass it. I found that tedious at first, but actually making it pass make me realize that there was some bogs in the code!</p>"},{"location":"develop/contributing/#documentation","title":"Documentation","text":"<p>Feel free to add some comments on this page, espacially if there are some notable differences between plotly and pgfplots (see this page). This pages are written in Markdown and are present in the directory <code>docs</code>. The site is build using Mkdocs-materials.</p>"},{"location":"develop/tests/","title":"Add some tests","text":""},{"location":"develop/tests/#local-tests","title":"Local tests","text":"<p>These tests are for development purpose, to ensure that the features that are developped are working as expected. They are present in the directory <code>src/tests</code> and can be run with the following command, from the <code>src</code> directory.</p> <pre><code>python3 -m tests.test_&lt;feature&gt;\n</code></pre> <p>A file <code>test_&lt;feature&gt;.py</code> contains the plotly figures that are used to test the feature <code>&lt;feature&gt;</code>. Each desired plot should be a function that returns the figure and a string that is the expected output:</p> <pre><code>def fig1():\n    fig = px.imshow([[1, 20, 30],\n                    [20, 1, 60],\n                    [30, 60, 1]])\n    return fig, \"Heatmaps with Plotly Express\"\n</code></pre> <p>Then set a list <code>functions</code> that contains the list of all the plot functions that you want to test:</p> <pre><code>    functions = [\n        (\"1\", fig1),\n        # (\"2\", fig2),  # you can comment a line to not run the test\n        (\"3\", fig3)\n    ]\n</code></pre> <p>Then the main function will run all the selected tests, and generate a TeX file in a subdirectory <code>outputs/test_&lt;feature&gt;</code>, named <code>main.tex</code>. Compile this TeX file with your favorite LaTeX compiler to see the result.</p>"},{"location":"develop/tests/#tests-for-the-ci","title":"Tests for the CI","text":"<p>These tests are run on the CI to check that the generated LaTeX code is still the same after the modifications. They are placed in the directory <code>tests</code> at the root of the repository. When <code>tox</code> is run (see here), they are the tests that are run, not the ones on the present section.</p> <p>Here is an example of a test that is run on the CI:</p> <pre><code>def plot_1():\n    fig = px.imshow([[1, 20, 30],\n                    [20, 1, 60],\n                    [30, 60, 1]])\n    return fig\n\ndef test_1():\n    assert_equality(plot_1(), os.path.join(this_dir, test_name, test_name + \"_1_reference.tex\"))\n</code></pre> <p>The reference TeX code should be inserted in a file <code>test_&lt;test_name&gt;_&lt;number&gt;_reference.tex</code> in the directory <code>tests/&lt;test_name&gt;</code>.</p> <p>Note</p> <p>The reference code should not contain the header <code>% This file was created with tikzplotly version 0.1.7.</code>, as the version number is bound to change. This header can be hidden with the option <code>include_disclamer=False</code> in the function <code>tikzplotly.save</code>.</p>"},{"location":"plot/NB/","title":"Some differences between plotly ans pgfplots","text":"<p>We gather here some points that are different between a plotly figure and the corresponding TikZ figure generated with <code>tikzplotly</code>.</p> <ul> <li>Size of the objects: in plotly, the size is given in <code>px</code> unit, while in TikZ it is given in <code>pt</code>. A conversion is performed (<code>1 px = 0.75 pt</code>), but this still results in objects of different sizes.</li> <li>By default, the colors or the markers are not the same in plotly and pgfplots. For instance, if nothing is specified, plotly will always use a dot marker, while pgfplot will change for each trace.</li> <li>The order of displaying the traces may be unconsistent between plotly and pgfplots. For instance, for this example, the two traces are inverted.</li> <li>The angle of rotation is different between Plotly and TikZ, but the function Plotly \u21a6 TikZ is not know at this current point.</li> </ul>"},{"location":"plot/features/","title":"Other features supported","text":""},{"location":"plot/features/#marker-style","title":"Marker style","text":"<p>From Styling Markers in Python.</p> Marker Style Example <pre><code>import plotly.express as px\nimport tikzplotly\n\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\n\nfig.update_traces(\n    marker=dict(size=8, symbol=\"diamond\", line=dict(width=2, color=\"DarkSlateGrey\")),\n    selector=dict(mode=\"markers\"),\n)\n\ntikzplotly.save(\"marker_style.tex\", fig)\n</code></pre> <p></p> <p>Note</p> <ul> <li>There are somes markers implemented in plotly that are not available in pgfplots (or at least not referenced in the documentation). For more details, refer to the example test_markers. By defualt, the marker style <code>*</code> will be used.</li> <li>By default, the colors or the markers are not the same in plotly and pgfplots. For instance, if nothing is specified, plotly will always use a dot marker, while pgfplot will change for each trace.</li> </ul>"},{"location":"plot/supported/","title":"Supported plots","text":"<p>The plots type supported by tikzplotly are presented in this page.</p>"},{"location":"plot/supported/#scatter-plots","title":"Scatter plots","text":"<p>The code has been constructed to export (almost all) the figures of the page Line Charts in Python of Plotly documentation.</p> Scatter plot Example <p><pre><code>import plotly.express as px\nimport tikzplotly\n\ndf = px.data.gapminder().query(\"continent=='Oceania'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", color='country')\n\ntikzplotly.save(\"line.tex\", fig)\n</code></pre> </p>"},{"location":"plot/supported/#heat-maps","title":"Heat maps","text":"<p>The code has been constructed to export (almost all) the figures of the page Heatmaps in Python of Plotly documentation.</p> Heatmap Example <pre><code>import plotly.express as px\nimport tikzplotly\nfig = px.imshow([[1, 20, 30],\n                [20, 1, 60],\n                [30, 60, 1]])\ntikzplotly.save(\"heatmap.tex\", fig)\n</code></pre> <p></p> <p>Note</p> <ul> <li>If possible, TikzPlotly try to save the heatmap as a png of the smallest size possible, namely 1 pixel for each value of the heatmap. But in some case, such export does not work. In this case, the image is saved in the original size of the Plotly figure.</li> </ul>"},{"location":"plot/supported/#histograms","title":"Histograms","text":"<p>The examples of the page Histograms in Python of Plotly documentation are supported.</p> Histogram Example <pre><code>df = px.data.tips()\nfig = px.histogram(df, x=\"total_bill\")\ntikzplotly.save(\"histogram.tex\", fig)\n</code></pre> <p></p> <p>Note</p> <ul> <li>There may be issues when many histograms are plotted on the same figure...</li> </ul>"},{"location":"plot/usage/","title":"Usage","text":"<pre><code>import plotly.express as px\nimport tikzplotly\n\ndf = px.data.gapminder().query(\"continent == 'Oceania'\")\nfig = px.line(df, x='year', y='lifeExp', color='country', markers=True)\ntikzplotly.save(\"example.tex\", fig)\n</code></pre> <p>The arguments of the function <code>tikzplotly.save</code> are:</p> <ul> <li><code>filename</code> (str): The name of the file where the tikz code will be saved.</li> <li><code>fig</code> (plotly.graph_objs.Figure): The figure to be saved.</li> <li><code>tikz_options</code> (str, optional): The options to be passed to the <code>tikzpicture</code> environment. Default is <code>None</code>.     For example <code>tikz_options=\"scale=0.5\"</code> will scale the figure by a factor 0.5.</li> <li><code>axis_options</code> (str, optional): Option that you would like to manually add the the <code>axis</code> environment.</li> <li><code>include_disclamer</code> (bool, optional): If <code>True</code>, the line <code>% This file was created with tikzplotly version XXX.</code> is added at the head of the generated code. Default is <code>True</code>.</li> <li><code>img_name</code> (str, optional): only for the export of heatmaps, the name of the image that will be saved. Default is <code>heatmap.png</code>.</li> </ul>"}]}